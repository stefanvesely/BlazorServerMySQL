@page "/"
@using Microsoft.Extensions.Configuration
@using DataAccess
@using IntensityServer.Models
@using IntensityServer.Data
@inject IDataAccess _data
@inject IConfiguration _config

<PageTitle>Main Page</PageTitle>

<h1>Workout Table</h1>
<table class="table table-bordered table-hover table-striped table-sm table-responsive">
    <thead class="fw-bold">
        <tr>
            <th>Player</th>
            <th>Event One</th>
            <th>Event Two</th>
            <th>Event Three</th>
            <th>Event Four</th>
            <th><label value=@scores>@scores</label></th>
        </tr>
    </thead>
    <tbody>

        @if (finalizedTable == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            @foreach (var row in finalizedTable.rows)
            {
                Player localplayer = row.player;
                <tr>
                    <td>@row.player.FirstName.Substring(0,1) @row.player.Surname</td>
                    <td>@row.ConvertToMinutes(row.eSeconds1)</td>
                    <td>@row.ConvertToMinutes(row.eSeconds2)</td>
                    <td>@row.ConvertToMinutes(row.eSeconds3)</td>
                    <td>@row.ConvertToMinutes(row.eSeconds4)</td>
                    <td>@row.eScore</td>                   
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private List<Player> players;
    private PlayerData _playerdata;
    private EventData _eventdata;
    private List<Event> events;
    private FullEventTable fulltable;
    private FullEventTable finalizedTable;
    private string scores = "Scores";
    protected override async Task OnInitializedAsync()
    {
        _eventdata = new EventData(_data, _config);
        _playerdata = new PlayerData(_data, _config);
        players = await _playerdata.DowloadPlayers();
        events = await _eventdata.DownLoadEvents();
        if (events == null)
        {
            events = new List<Event>();
            foreach (Player play in players)
            {
                for (int i = 0; i < 5; i++)
                {
                    events.Add(new Event()
                        {
                            UserId = play.PlayerId,
                            EventId = i + 1,
                            Seconds = 0,
                        });
                    int eid = i + 1;
                    await _eventdata.UploadEvent(play.PlayerId.ToString(), "0", eid.ToString());
                }
            }
        }
        await Task.Run(() => fulltable = new FullEventTable(players, events, _data, _config));
        await Task.Run(() => finalizedTable = fulltable.UpdateScores());
        if (finalizedTable.rows.Count == 1)
        {
            scores = "Score";
        }

    }
}

